{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    const token = this.authService.getToken();\n    if (token) {\n      const cloned = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloned);\n    }\n    return next.handle(req);\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAC1BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACzC,IAAID,KAAK,EAAE;MACT,MAAME,MAAM,GAAGJ,GAAG,CAACK,KAAK,CAAC;QACvBC,OAAO,EAAEN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE;OAC5D,CAAC;MACF,OAAOD,IAAI,CAACO,MAAM,CAACJ,MAAM,CAAC;;IAE5B,OAAOH,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC;EACzB;;;uBAfWJ,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAa,SAAfb,eAAe;IAAA;EAAA","names":["AuthInterceptor","constructor","authService","intercept","req","next","token","getToken","cloned","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\Pruebas\\Oncredit\\gestion-productos\\src\\app\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const token = this.authService.getToken();\n    if (token) {\n      const cloned = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloned);\n    }\n    return next.handle(req);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}