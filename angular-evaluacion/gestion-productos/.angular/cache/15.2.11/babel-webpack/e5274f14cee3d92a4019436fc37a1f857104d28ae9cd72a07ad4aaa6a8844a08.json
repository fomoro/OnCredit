{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.tokenKey = 'authToken';\n  }\n  login(username, password) {\n    if (username === 'admin' && password === 'admin') {\n      localStorage.setItem(this.tokenKey, 'fake-jwt-token');\n      return true;\n    }\n    return false;\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem(this.tokenKey);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,WAAW;EAGtBC;IAFQ,aAAQ,GAAG,WAAW;EAEf;EAEfC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,OAAO,EAAE;MAChDC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,QAAQ,EAAE,gBAAgB,CAAC;MACrD,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEAC,MAAM;IACJH,YAAY,CAACI,UAAU,CAAC,IAAI,CAACF,QAAQ,CAAC;EACxC;EAEAG,eAAe;IACb,OAAO,CAAC,CAACL,YAAY,CAACM,OAAO,CAAC,IAAI,CAACJ,QAAQ,CAAC;EAC9C;EAEAK,QAAQ;IACN,OAAOP,YAAY,CAACM,OAAO,CAAC,IAAI,CAACJ,QAAQ,CAAC;EAC5C;;;uBAvBWP,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAa,SAAXb,WAAW;MAAAc,YAFV;IAAM;EAAA","names":["AuthService","constructor","login","username","password","localStorage","setItem","tokenKey","logout","removeItem","isAuthenticated","getItem","getToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\Pruebas\\Oncredit\\gestion-productos\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private tokenKey = 'authToken';\n\n  constructor() {}\n\n  login(username: string, password: string): boolean {\n    if (username === 'admin' && password === 'admin') {\n      localStorage.setItem(this.tokenKey, 'fake-jwt-token');\n      return true;\n    }\n    return false;\n  }\n\n  logout(): void {\n    localStorage.removeItem(this.tokenKey);\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem(this.tokenKey);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}