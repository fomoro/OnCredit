{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const token = localStorage.getItem('authToken'); // Cambiado 'token' a 'authToken'\n    if (token) {\n      // Si el token existe, permitimos el acceso\n      return true;\n    } else {\n      // Si no hay token, redirigimos a la página de login\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAE;IAElD,IAAIF,KAAK,EAAE;MACT;MACA,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;;;uBAlBWV,SAAS;IAAA;EAAA;;;aAATA,SAAS;MAAAW,SAATX,SAAS;MAAAY,YAFR;IAAM;EAAA","names":["AuthGuard","constructor","authService","router","canActivate","route","state","token","localStorage","getItem","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\Pruebas\\Oncredit\\gestion-productos\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    const token = localStorage.getItem('authToken');  // Cambiado 'token' a 'authToken'\n\n    if (token) {\n      // Si el token existe, permitimos el acceso\n      return true;\n    } else {\n      // Si no hay token, redirigimos a la página de login\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}